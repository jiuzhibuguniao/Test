#include<iostream>
#include<vector>
#include<string>
#include<memory>
using namespace std; using std::vector; using std::string;

class StrBlob
{
public:
	typedef std::vector<std::string>::size_type size_type;
	StrBlob() :data(make_shared<vector<string>>())  {}
	StrBlob(std::initializer_list<std::string> i1) :data(make_shared<vector<string>>(i1))  {}


	size_type size() const { return data->size(); }
	bool empty()  const { return data->empty(); }

	void push_back(const std::string &t)   { data->push_back(t); }
	void pop_back();

	std::string& front();
	std::string& back();

private:
	std::shared_ptr<std::vector<std::string>> data;
	void check(size_type i, const std::string &msg)  const;
};


void StrBlob::check(size_type i, const string &msg)  const
{
	if (i >= data->size())
		throw out_of_range(msg);
}

string& StrBlob::front()
{
	check(0, "front on empty StrBlob");
	return data->front();
}

string& StrBlob::back()
{
	check(0, "back on empty StrBlob");
	return data->back();
}

void StrBlob::pop_back()
{
	check(0, "pop_back on empty StrBlob");
	data->pop_back();
}
